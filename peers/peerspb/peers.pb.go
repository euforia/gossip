// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peers.proto

/*
	Package peerspb is a generated protocol buffer package.

	It is generated from these files:
		peers.proto

	It has these top-level messages:
		Peer
*/
package peerspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import vivaldi "github.com/hexablock/vivaldi"

import net "net"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Peer struct {
	Name       string              `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Addr       net.IP              `protobuf:"bytes,2,opt,name=Addr,proto3,casttype=net.IP" json:"Addr,omitempty"`
	Port       uint32              `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	PublicKey  []byte              `protobuf:"bytes,4,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Offline    bool                `protobuf:"varint,5,opt,name=Offline,proto3" json:"Offline,omitempty"`
	LastSeen   int64               `protobuf:"varint,6,opt,name=LastSeen,proto3" json:"LastSeen,omitempty"`
	Heartbeats uint64              `protobuf:"varint,7,opt,name=Heartbeats,proto3" json:"Heartbeats,omitempty"`
	Coordinate *vivaldi.Coordinate `protobuf:"bytes,8,opt,name=Coordinate" json:"Coordinate,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptorPeers, []int{0} }

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetAddr() net.IP {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *Peer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Peer) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Peer) GetOffline() bool {
	if m != nil {
		return m.Offline
	}
	return false
}

func (m *Peer) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *Peer) GetHeartbeats() uint64 {
	if m != nil {
		return m.Heartbeats
	}
	return 0
}

func (m *Peer) GetCoordinate() *vivaldi.Coordinate {
	if m != nil {
		return m.Coordinate
	}
	return nil
}

func init() {
	proto.RegisterType((*Peer)(nil), "peerspb.Peer")
}
func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPeers(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPeers(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.Port))
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPeers(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.Offline {
		dAtA[i] = 0x28
		i++
		if m.Offline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LastSeen != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.LastSeen))
	}
	if m.Heartbeats != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.Heartbeats))
	}
	if m.Coordinate != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPeers(dAtA, i, uint64(m.Coordinate.Size()))
		n1, err := m.Coordinate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintPeers(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Peer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPeers(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovPeers(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovPeers(uint64(m.Port))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovPeers(uint64(l))
	}
	if m.Offline {
		n += 2
	}
	if m.LastSeen != 0 {
		n += 1 + sovPeers(uint64(m.LastSeen))
	}
	if m.Heartbeats != 0 {
		n += 1 + sovPeers(uint64(m.Heartbeats))
	}
	if m.Coordinate != nil {
		l = m.Coordinate.Size()
		n += 1 + l + sovPeers(uint64(l))
	}
	return n
}

func sovPeers(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPeers(x uint64) (n int) {
	return sovPeers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeers
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeers
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offline = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeats", wireType)
			}
			m.Heartbeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Heartbeats |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinate == nil {
				m.Coordinate = &vivaldi.Coordinate{}
			}
			if err := m.Coordinate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPeers
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPeers
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPeers(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPeers = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeers   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("peers.proto", fileDescriptorPeers) }

var fileDescriptorPeers = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcd, 0x4e, 0xe3, 0x30,
	0x14, 0x85, 0xc7, 0xd3, 0x4c, 0x7f, 0xdc, 0x99, 0x8d, 0x67, 0x63, 0x55, 0x28, 0x44, 0x6c, 0xb0,
	0x90, 0x88, 0x25, 0xba, 0x62, 0x49, 0xd9, 0x80, 0x40, 0x10, 0x99, 0x1d, 0x3b, 0x3b, 0xb9, 0x49,
	0x2d, 0xd2, 0x38, 0x72, 0x9c, 0x0a, 0xde, 0x82, 0xc7, 0x62, 0xc9, 0x13, 0x20, 0x54, 0x1e, 0x02,
	0x89, 0x15, 0xaa, 0x29, 0x34, 0xbb, 0xf3, 0x9d, 0x7b, 0x8f, 0x2c, 0xdf, 0x83, 0xc7, 0x35, 0x80,
	0x6d, 0xe2, 0xda, 0x1a, 0x67, 0xc8, 0xc0, 0x43, 0xad, 0x26, 0x87, 0x85, 0x76, 0xf3, 0x56, 0xc5,
	0xa9, 0x59, 0xf0, 0xc2, 0x14, 0x86, 0xfb, 0xb9, 0x6a, 0x73, 0x4f, 0x1e, 0xbc, 0xfa, 0xca, 0x4d,
	0x0e, 0x3a, 0xeb, 0x73, 0xb8, 0x97, 0xaa, 0x34, 0xe9, 0x1d, 0x5f, 0xea, 0xa5, 0x2c, 0x33, 0xcd,
	0x1b, 0x67, 0xdb, 0xd4, 0x6d, 0xde, 0xd8, 0x7b, 0x47, 0x38, 0x48, 0x00, 0x2c, 0x21, 0x38, 0xb8,
	0x92, 0x0b, 0xa0, 0x28, 0x42, 0x6c, 0x24, 0xbc, 0x26, 0x21, 0x0e, 0x4e, 0xb2, 0xcc, 0xd2, 0xdf,
	0x11, 0x62, 0x7f, 0x67, 0xf8, 0xe3, 0x65, 0xb7, 0x5f, 0x81, 0x8b, 0xcf, 0x13, 0xe1, 0xfd, 0x75,
	0x26, 0x31, 0xd6, 0xd1, 0x5e, 0x84, 0xd8, 0x3f, 0xe1, 0x35, 0xd9, 0xc1, 0xa3, 0xa4, 0x55, 0xa5,
	0x4e, 0x2f, 0xe0, 0x81, 0x06, 0xeb, 0xa0, 0xd8, 0x1a, 0x84, 0xe2, 0xc1, 0x75, 0x9e, 0x97, 0xba,
	0x02, 0xfa, 0x27, 0x42, 0x6c, 0x28, 0xbe, 0x91, 0x4c, 0xf0, 0xf0, 0x52, 0x36, 0xee, 0x06, 0xa0,
	0xa2, 0xfd, 0x08, 0xb1, 0x9e, 0xf8, 0x61, 0x12, 0x62, 0x7c, 0x06, 0xd2, 0x3a, 0x05, 0xd2, 0x35,
	0x74, 0x10, 0x21, 0x16, 0x88, 0x8e, 0x43, 0xa6, 0x18, 0x9f, 0x1a, 0x63, 0x33, 0x5d, 0x49, 0x07,
	0x74, 0x18, 0x21, 0x36, 0x3e, 0xfa, 0x1f, 0x6f, 0x3e, 0x1c, 0x6f, 0x47, 0xa2, 0xb3, 0x36, 0x3b,
	0x7e, 0x5a, 0x85, 0xe8, 0x79, 0x15, 0xa2, 0xd7, 0x55, 0x88, 0x1e, 0xdf, 0xc2, 0x5f, 0xb7, 0xfb,
	0x9d, 0xbb, 0x41, 0x9b, 0x1b, 0xab, 0x25, 0x2f, 0x4c, 0xd3, 0xe8, 0x9a, 0xfb, 0x26, 0xf8, 0xa6,
	0x0f, 0xd5, 0xf7, 0xb7, 0x9b, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x19, 0xf9, 0x9d, 0xae,
	0x01, 0x00, 0x00,
}
